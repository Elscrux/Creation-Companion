// Adapted from https://raw.githubusercontent.com/Kapiainen/SublimePapyrus/master/Source/Modules/Skyrim/Skyrim.YAML-tmLanguage
{
    "name": "Papyrus - Skyrim",
    "scopeName": "source.papyrus.skyrim",
    "patterns": [
        {
            "comment": "Empty line",
            "name": "meta.emptyline.papyrus",
            "match": "^\\s*$"
        },
        { "include": "#comments" },
        { "include": "#headerline" },
        { "include": "#import" },
        { "include": "#state" },
        { "include": "#event" },
        { "include": "#property" },
        { "include": "#function" },
        { "include": "#variable" },
        { "include": "#whitespace" },
        { "include": "#unmatched" }
    ],
    "repository": {
        "endOfLine": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#whitespace" },
                { "include": "#multiline" },
                { "include": "#unmatched" }
            ]
        },
        "comments": {
            "patterns": [
                { "include": "#commentBlock" },
                { "include": "#commentLine" },
                { "include": "#commentDocumentation" }
            ]
        },
        "commentBlock": {
            "patterns": [
                {
                    "name": "comment.block.papyrus",
                    "begin": ";/",
                    "end": "/;"
                }
            ]
        },
        "commentLine": {
            "name": "comment.line.papyrus",
            "match": ";.*$"
        },
        "commentDocumentation": {
            "name": "comment.documentation.papyrus",
            "begin": "^\\s*\\{",
            "end": "\\}"
        },
        "headerline": {
            "comment": "header line",
            "name": "meta.headerline.papyrus",
            "begin": "(?i)^\\s*(scriptname)\\s+([_a-z]\\w*)(\\s+(extends)\\s+([_a-z]\\w*))?",
            "beginCaptures": {
                "1": { "name": "storage.type.papyrus" },
                "2": { "name": "entity.name.type.papyrus" },
                "4": { "name": "keyword.other.papyrus" },
                "5": { "name": "entity.other.inherited-class.papyrus" }
            },
            "end": "[\\n\\r]",
            "patterns": [
                {
                    "comment": "Script flags",
                    "name": "keyword.other.papyrus",
                    "match": "(?i)\\b(hidden|conditional)\\b"
                },
                { "include": "#endOfLine" }
            ]
        },
        "import": {
            "comment": "Import statement",
            "name": "meta.import.papyrus",
            "begin": "(?i)^\\s*(import)\\s+([_a-z]\\w*)",
            "beginCaptures": {
                "1": { "name": "keyword.other.papyrus" },
                "2": { "name": "support.class.papyrus" }
            },
            "end": "[\\n\\r]",
            "patterns": [
                { "include": "#endOfLine" }
            ]
        },
        "state": {
            "comment": "State declaration",
            "name": "meta.state.papyrus",
            "begin": "(?i)^\\s*(?:(auto)\\s+)?(state)\\s+([_a-z]\\w*)",
            "beginCaptures": {
                "1": { "name": "storage.type.function.papyrus" },
                "2": { "name": "keyword.other.papyrus" },
                "3": { "name": "entity.name.function.papyrus" }
            },
            "end": "(?i)^\\b(endstate)\\b",
            "endCaptures": {
                "1": { "name": "storage.type.function.papyrus" }
            },
            "patterns": [
                { "include": "#event" },
                { "include": "#function" },
                { "include": "#endOfLine" }
            ]
        },
        "event": {
            "patterns": [
                {
                    "comment": "native event declaration",
                    "name": "meta.event.native.papyrus",
                    "begin": "(?i)^\\s*(event)\\s+([_a-z]\\w*)(?=[\\s\\S]*native)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.function.papyrus" },
                        "2": { "name": "entity.name.function.papyrus" }
                    },
                    "end": "(?i)\\b(native)\\b",
                    "endCaptures": {
                        "1": { "name": "keyword.other.papyrus" }
                    },
                    "patterns": [
                        { "include": "#eventParameters" },
                        { "include": "#unmatched" }
                    ]
                },
                {
                    "comment": "event declaration",
                    "name": "meta.event.papyrus",
                    "begin": "(?i)^\\s*(event)\\s+([_a-z]\\w*)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.function.papyrus" },
                        "2": { "name": "entity.name.function.papyrus" }
                    },
                    "end": "(?i)^\\s*\\b(endevent)\\b",
                    "endCaptures": {
                        "1": { "name": "storage.type.function.papyrus" }
                    },
                    "patterns": [
                        { "include": "#eventParameters" },
                        { "include": "#statement" },
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "eventParameters": {
            "patterns": [
                {
                    "comment": "Event parameters",
                    "name": "meta.eventparameters.papyrus",
                    "begin": "(?i)(?<=event[^\\n]*)\\(",
                    "end": "\\)",
                    "patterns": [
                        { "include": "#eventParameter" },
                        { "include": "#comma" },
                        { "include": "#multiline" },
                        { "include": "#whitespace" },
                        { "include": "#unmatched" }
                    ]
                }
            ]
        },
        "eventParameter": {
            "patterns": [
                {
                    "comment": "Event parameter identifier",
                    "name": "variable.parameter.papyrus",
                    "match": "(?i)(?<!,\\s*)\\b([_a-z]\\w*)\\s*(?=\\,|\\))"
                },
                { "include": "#typeIdentifier" }
            ]
        },
        "function": {
            "patterns": [
                {
                    "comment": "native function declaration",
                    "name": "meta.s.native.papyrus",
                    "begin": "(?i)^\\s*(?:([_a-z]\\w*)(?:\\[\\])?\\s+)?(function)\\s+([_a-z]\\w*)(?=[\\s\\S]*native)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.papyrus" },
                        "2": { "name": "storage.type.function.papyrus" },
                        "3": { "name": "entity.name.function.papyrus" }
                    },
                    "end": "(?i)\\b(native\\s+global|global\\s+native|native)\\b",
                    "endCaptures": {
                        "1": { "name": "keyword.other.papyrus" }
                    },
                    "patterns": [
                        { "include": "#functionParameters" },
                        { "include": "#unmatched" }
                    ]
                },
                {
                    "comment": "function declaration",
                    "name": "meta.s.papyrus",
                    "begin": "(?i)^\\s*(?:([_a-z]\\w*)(?:\\[\\])?\\s+)?(function)\\s+([_a-z]\\w*)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.papyrus" },
                        "2": { "name": "storage.type.function.papyrus" },
                        "3": { "name": "entity.name.function.papyrus" }
                    },
                    "end": "(?i)^\\s*\\b(endfunction)\\b",
                    "endCaptures": {
                        "1": { "name": "storage.type.function.papyrus" }
                    },
                    "patterns": [
                        { "include": "#functionParameters" },
                        { "include": "#statement" },
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "functionParameters": {
            "patterns": [
                {
                    "comment": "Function parameters",
                    "name": "meta.functionparameters.papyrus",
                    "begin": "(?i)(?<=function[^\\n]*)\\(",
                    "end": "\\)",
                    "patterns": [
                        { "include": "#functionParameter" },
                        { "include": "#comma" },
                        { "include": "#multiline" },
                        { "include": "#whitespace" }
                    ]
                }
            ]
        },
        "functionParameter": {
            "patterns": [
                { "include": "#initialize" },
                {
                    "comment": "Event parameter identifier",
                    "name": "variable.parameter.papyrus",
                    "match": "(?i)(?<!,\\s*)\\b([_a-z]\\w*)\\s*(?=\\,|\\)|\\=)"
                },
                { "include": "#typeIdentifier" }
            ]
        },
        "property": {
            "patterns": [
                {
                    "comment": "Autoreadonly property declaration",
                    "name": "meta.property.autoreadonly.papyrus",
                    "begin": "(?i)^\\s*([_a-z]\\w*)(?:\\[\\])?\\s+(property)\\s+([_a-z]\\w*)\\s+(\\=)\\s*(?=[^\\n]*autoreadonly)",
                    "beginCaptures": {
                        "1": { "name": "entity.name.type.papyrus" },
                        "2": { "name": "keyword.other.papyrus" },
                        "3": { "name": "variable.other.papyrus" }
                    },
                    "end": "(?i)\\b(autoreadonly)\\s+(hidden)*\\s*",
                    "endCaptures": {
                        "1": { "name": "keyword.other.papyrus" },
                        "2": { "name": "keyword.other.papyrus" }
                    },
                    "patterns": [
                        { "include": "#literal" },
                        { "include": "#unmatched" }
                    ]
                },
                {
                    "comment": "Auto & Full property declaration",
                    "name": "meta.property.auto.papyrus",
                    "begin": "(?i)^\\s*([_a-z]\\w*)(?:\\[\\])?\\s+(property)\\s+",
                    "beginCaptures": {
                        "1": { "name": "entity.name.type.papyrus" },
                        "2": { "name": "keyword.other.papyrus" }
                    },
                    "end": "(?i)\\b(auto)\\b(?:\\s+(conditional\\s+hidden|hidden\\s+conditional|conditional|hidden))?|(endproperty)",
                    "endCaptures": {
                        "1": { "name": "keyword.other.papyrus" },
                        "2": { "name": "keyword.other.papyrus" },
                        "3": { "name": "keyword.other.papyrus" }
                    },
                    "patterns": [
                        { "include": "#initialize" },
                        { "include": "#identifier" },
                        { "include": "#function" },
                        { "include": "#unmatched" }
                    ]
                }
            ]
        },
        "if": {
            "patterns": [
                {
                    "comment": "If statement",
                    "name": "meta.if.papyrus",
                    "begin": "(?i)^\\s*(if)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.papyrus" }
                    },
                    "end": "(?i)\\b(endif)\\b",
                    "endCaptures": {
                        "1": { "name": "keyword.control.papyrus" }
                    },
                    "patterns": [
                        { "include": "#elseif" },
                        { "include": "#else" },
                        { "include": "#statement" },
                        { "include": "#expression" },
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "elseif": {
            "patterns": [
                {
                    "comment": "ElseIf statement",
                    "name": "meta.elseif.papyrus",
                    "begin": "(?i)^\\s*(elseif)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.papyrus" }
                    },
                    "end": "[\\n\\r]",
                    "patterns": [
                        { "include": "#expression" },
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "else": {
            "patterns": [
                {
                    "comment": "Else statement",
                    "name": "meta.else.papyrus",
                    "begin": "(?i)^\\s*(else)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.papyrus" }
                    },
                    "end": "[\\n\\r]",
                    "patterns": [
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "while": {
            "patterns": [
                {
                    "comment": "While statement",
                    "name": "meta.while.papyrus",
                    "begin": "(?i)^\\s*(while)\\s*",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.papyrus" }
                    },
                    "end": "(?i)^\\s*(endwhile)\\b",
                    "endCaptures": {
                        "1": { "name": "keyword.control.papyrus" }
                    },
                    "patterns": [
                        { "include": "#statement" },
                        { "include": "#expression" },
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "comment": "Variable declaration with a default value",
                    "name": "meta.variable.papyrus",
                    "begin": "(?i)^\\s*([_a-z]\\w*)(?:\\[\\])?\\s+([_a-z]\\w*)(?:\\s*(\\=)\\s*)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.papyrus" },
                        "2": { "name": "variable.other.papyrus" },
                        "3": { "name": "keyword.operator.papyrus" }
                    },
                    "end": "[\\n\\r]",
                    "patterns": [
                        { "include": "#literal" },
                        {
                            "name": "keyword.other.papyrus", "match": "(?i)(?:\\b(conditional)\\b)"
                        },
                        { "include": "#expression" },
                        { "include": "#endOfLine" }
                    ]
                },
                {
                    "comment": "Scriptwide variable declaration without a default value",
                    "name": "meta.variable.papyrus",
                    "begin": "(?i)^\\s*([_a-z]\\w*)(?:\\[\\])?\\s+([_a-z]\\w*)(?:\\s+(conditional)\\b)?",
                    "beginCaptures": {
                        "1": { "name": "storage.type.papyrus" },
                        "2": { "name": "variable.other.papyrus" },
                        "3": { "name": "keyword.other.papyrus" }
                    },
                    "end": "[\\n\\r]",
                    "patterns": [
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "statement": {
            "patterns": [
                { "include": "#return" },
                { "include": "#if" },
                { "include": "#while" },
                { "include": "#initialize" },
                { "include": "#variable" },
                { "include": "#assign" },
                { "include": "#functionCall" }
            ]
        },
        "initialize": {
            "patterns": [
                {
                    "comment": "Assignment operator",
                    "name": "keyword.operator.assignment.papyrus",
                    "match": "(\\=)\\s*",
                    "captures": {
                        "1": { "name": "keyword.operator.papyrus" }
                    }
                },
                { "include": "#literal" }
            ]
        },
        "assign": {
            "patterns": [
                { "include": "#assignmentOperators" },
                { "include": "#expression" },
                { "include": "#endOfLine" }
            ]
        },
        "assignmentOperators": {
            "patterns": [
                {
                    "comment": "Assignment operators",
                    "name": "keyword.operator.papyrus",
                    "match": "(\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=)"
                }
            ]
        },
        "return": {
            "patterns": [
                {
                    "comment": "Return statements",
                    "name": "meta.return.papyrus",
                    "begin": "(?i)^\\s*(return)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.other.papyrus" }
                    },
                    "end": "[\\n\\r]",
                    "patterns": [
                        { "include": "#expression" },
                        { "include": "#endOfLine" }
                    ]
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "comment": "OR",
                    "name": "keyword.operator.papyrus",
                    "match": "\\|\\|"
                },
                { "include": "#andExpression" },
                { "include": "#endOfLine" }
            ]
        },
        "andExpression": {
            "patterns": [
                {
                    "comment": "AND",
                    "name": "keyword.operator.papyrus",
                    "match": "\\&\\&"
                },
                { "include": "#boolExpression" }
            ]
        },
        "boolExpression": {
            "patterns": [
                {
                    "comment": "Comparison operators",
                    "name": "keyword.operator.papyrus",
                    "match": "(\\=\\=|\\!\\=|\\<\\=|\\>\\=|\\<|\\>)"
                },
                { "include": "#addExpression" }
            ]
        },
        "addExpression": {
            "patterns": [
                {
                    "comment": "Addition or subtraction",
                    "name": "keyword.operator.papyrus",
                    "match": "(\\+|\\-)"
                },
                { "include": "#multExpression" }
            ]
        },
        "multExpression": {
            "patterns": [
                {
                    "comment": "Multiplication, division, or modulus",
                    "name": "keyword.operator.papyrus",
                    "match": "(\\*|/|\\%)"
                },
                { "include": "#unaryExpression" }
            ]
        },
        "unaryExpression": {
            "patterns": [
                {
                    "comment": "Unary minus or NOT",
                    "name": "keyword.operator.papyrus",
                    "match": "(\\-|\\!)"
                },
                { "include": "#castAtom" }
            ]
        },
        "castAtom": {
            "patterns": [
                {
                    "comment": "Cast",
                    "name": "meta.cast.papyrus",
                    "match": "(?i)\\b(as)\\s+([_a-z]\\w*)\\b",
                    "captures": {
                        "1": { "name": "keyword.operator.papyrus" },
                        "2": { "name": "storage.type.papyrus" }
                    }
                },
                { "include": "#dotAtom" }
            ]
        },
        "dotAtom": {
            "patterns": [
                {
                    "comment": "Dot",
                    "name": "keyword.operator.papyrus",
                    "match": "\\."
                },
                { "include": "#literal" },
                { "include": "#arrayAtom" },
                { "include": "#arrayFuncOrId" }
            ]
        },
        "arrayAtom": {
            "patterns": [
                {
                    "comment": "Array",
                    "name": "meta.array.papyrus",
                    "begin": "\\[",
                    "end": "\\]",
                    "patterns": [
                        { "include": "#expression" }
                    ]
                },
                { "include": "#atom" }
            ]
        },
        "atom": {
            "patterns": [
                {
                    "comment": "New array",
                    "name": "meta.newarray.papyrus",
                    "begin": "(?i)\\b(new)\\s+([_a-z]\\w*)\\[",
                    "beginCaptures": {
                        "1": { "name": "keyword.operator.papyrus" },
                        "2": { "name": "storage.type.papyrus" }
                    },
                    "end": "\\]",
                    "patterns": [
                        { "include": "#integer" }
                    ]
                },
                {
                    "comment": "Parenthesis",
                    "name": "meta.parenthesis.papyrus",
                    "begin": "\\(",
                    "end": "\\)|[\\n\\r]",
                    "patterns": [
                        { "include": "#expression" }
                    ]
                },
                { "include": "#funcOrId" }
            ]
        },
        "funcOrId": {
            "patterns": [
                {
                    "comment": "Length",
                    "name": "keyword.other.papyrus",
                    "match": "(?i)\\b(length)\\b"
                },
                { "include": "#functionCall" },
                { "include": "#specialVariables" },
                { "include": "#identifier" }
            ]
        },
        "functionCall": {
            "patterns": [
                {
                    "comment": "Function call",
                    "name": "meta.functioncall.papyrus",
                    "begin": "(?i)\\b([_a-z]\\w*)\\(",
                    "beginCaptures": {
                        "1": { "name": "variable.other.papyrus" }
                    },
                    "end": "\\)",
                    "patterns": [
                        { "include": "#functionCallParameters" }
                    ]
                }
            ]
        },
        "functionCallParameters": {
            "patterns": [
                { "include": "#comma" },
                { "include": "#functionCallParameter" }
            ]
        },
        "functionCallParameter": {
            "patterns": [
                {
                    "comment": "Specific parameter",
                    "name": "meta.functioncallparameter.papyrus",
                    "match": "(?i)\\b(?:([_a-z]\\w*)\\s*(\\=)(?!\\=))",
                    "captures": {
                        "1": { "name": "variable.parameter.papyrus" },
                        "2": { "name": "keyword.operator.papyrus" }
                    }
                },
                { "include": "#expression" }
            ]
        },
        "arrayFuncOrId": {
            "patterns": [
                { "include": "#funcOrId" },
                {
                    "comment": "Array element access",
                    "name": "meta.arrayelement.papyrus",
                    "begin": "\\[",
                    "end": "\\]",
                    "patterns": [
                        { "include": "#expression" }
                    ]
                }
            ]
        },
        "comma": {
            "patterns": [
                {
                    "comment": "Comma",
                    "name": "meta.comma.papyrus",
                    "match": "\\,(?!\\s*\\,)"
                }
            ]
        },
        "whitespace": {
            "patterns": [
                {
                    "comment": "Whitespace",
                    "name": "meta.whitespace.papyrus",
                    "match": "([ \\t])"
                }
            ]
        },
        "multiline": {
            "patterns": [
                {
                    "comment": "Multiline",
                    "name": "meta.multiline.papyrus",
                    "begin": "\\\\",
                    "beginCaptures": {
                        "0": { "name": "keyword.operator.papyrus" }
                    },
                    "end": "[\\n\\r]",
                    "patterns": [
                        { "include": "#commentBlock" },
                        { "include": "#commentLine" },
                        { "include": "#whitespace" },
                        { "include": "#unmatched" }
                    ]
                }
            ]
        },
        "unmatched": {
            "patterns": [
                {
                    "comment": "Unmatched",
                    "name": "invalid.illegal.papyrus",
                    "match": "[^\\n\\r]"
                }
            ]
        },
        "unaryMinus": {
            "patterns": [
                {
                    "comment": "Unary minus",
                    "name": "keyword.operator.papyrus",
                    "match": "\\-(?=\\d)"
                }
            ]
        },
        "literal": {
            "patterns": [
                { "include": "#obj" },
                { "include": "#bool" },
                { "include": "#float" },
                { "include": "#integer" },
                { "include": "#string" }
            ]
        },
        "obj": {
            "patterns": [
                {
                    "comment": "Object literal",
                    "name": "constant.language.object.papyrus",
                    "match": "(?i)\\b(none)\\b"
                }
            ]
        },
        "bool": {
            "patterns": [
                {
                    "comment": "Boolean literal",
                    "name": "constant.language.boolean.papyrus",
                    "match": "(?i)\\b(true|false)\\b"
                }
            ]
        },
        "float": {
            "patterns": [
                { "include": "#unaryMinus" },
                {
                    "comment": "Float literal",
                    "name": "constant.numeric.float.papyrus",
                    "match": "\\b(\\d+\\.\\d+)\\b"
                }
            ]
        },
        "integer": {
            "patterns": [
                { "include": "#unaryMinus" },
                {
                    "comment": "Integer literal",
                    "name": "constant.numeric.integer.papyrus",
                    "match": "(?i)\\b(0x[0-9a-f]+|\\d+)\\b"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "comment": "String literal",
                    "name": "string.quoted.double",
                    "begin": "\\\"(?=[^\\n]*\\\")",
                    "end": "\\\"",
                    "patterns": [
                        {
                            "comment": "Escape sequences",
                            "name": "constant.character.escape.papyrus",
                            "match": "(\\\\.)"
                        }
                    ]
                }
            ]
        },
        "specialVariables": {
            "patterns": [
                {
                    "comment": "Special variables",
                    "name": "keyword.other.papyrus",
                    "match": "(?i)\\b(parent|self)\\b"
                }
            ]
        },
        "baseTypes": {
            "patterns": [
                {
                    "comment": "Type",
                    "name": "storage.type.papyrus",
                    "match": "(?i)\\b(bool|float|int|string)\\b"
                }
            ]
        },
        "identifier": {
            "patterns": [
                {
                    "comment": "Identifier",
                    "name": "variable.other.papyrus",
                    "match": "(?i)\\b([_a-z]\\w*)\\b"
                }
            ]
        },
        "typeIdentifier": {
            "patterns": [
                {
                    "comment": "Type identifier",
                    "name": "storage.type.papyrus",
                    "match": "(?i)\\b([_a-z]\\w*)\\b(?!\\s*(\\)|\\,))"
                }
            ]
        },
        "brackets": {
            "patterns": [
                {
                    "comment": "Brackets",
                    "name": "meta.array.papyrus",
                    "match": "\\[\\]"
                }
            ]
        }
    }
}