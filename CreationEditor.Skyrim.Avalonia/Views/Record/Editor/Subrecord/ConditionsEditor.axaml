<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:attached="clr-namespace:CreationEditor.Avalonia.Attached;assembly=CreationEditor.Avalonia"
             xmlns:model="clr-namespace:CreationEditor.Skyrim.Avalonia.Models.Record.Editor.Subrecord"
             xmlns:command="clr-namespace:CreationEditor.Avalonia.Command;assembly=CreationEditor.Avalonia"
             xmlns:constants="clr-namespace:CreationEditor.Skyrim.Avalonia.Resources.Constants"
             xmlns:dataTemplates="clr-namespace:CreationEditor.Skyrim.Avalonia.Resources.DataTemplates"
             xmlns:converter="clr-namespace:CreationEditor.Skyrim.Avalonia.Resources.Converter"
             xmlns:converter1="clr-namespace:CreationEditor.Avalonia.Converter;assembly=CreationEditor.Avalonia"
             xmlns:picker="clr-namespace:CreationEditor.Skyrim.Avalonia.Views.Record.Picker"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             xmlns:controls="clr-namespace:FluentAvalonia.UI.Controls;assembly=FluentAvalonia"
             xmlns:picker1="clr-namespace:CreationEditor.Avalonia.Views.Record.Picker;assembly=CreationEditor.Avalonia"
             xmlns:subrecord="clr-namespace:CreationEditor.Skyrim.Avalonia.Views.Record.Editor.Subrecord"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="CreationEditor.Skyrim.Avalonia.Views.Record.Editor.Subrecord.ConditionsEditor"
             x:Name="Editor">
    <DataGrid x:Name="ConditionsGrid"
              ItemsSource="{Binding #Editor.Conditions}"
              Background="{DynamicResource SystemControlTransparentBrush}"
              CanUserReorderColumns="False"
              CanUserResizeColumns="True"
              CanUserSortColumns="True"
              AutoGenerateColumns="False"
              GridLinesVisibility="Horizontal"
              MinHeight="250"
              Classes="NoCellSelection Medium Mutable"
              attached:DragDropExtended.AllowDrag="True"
              attached:DragDropExtended.AllowDrop="True"
              attached:DragDropExtended.CanDrop="{Binding #Editor.CanDrop}">

        <attached:ListShortcuts.Add>
            <command:AddElement
                x:TypeArguments="model:EditableCondition"
                List="{Binding #Editor.Conditions}"/>
        </attached:ListShortcuts.Add>

        <attached:ListShortcuts.Remove>
            <command:RemoveElement
                x:TypeArguments="model:EditableCondition"
                List="{Binding #Editor.Conditions}"/>
        </attached:ListShortcuts.Remove>

        <DataGrid.ContextFlyout>
            <MenuFlyout>
                <MenuItem Header="Copy"
                          InputGesture="Ctrl+C"
                          Command="{Binding #Editor.Copy}"
                          CommandParameter="{Binding #ConditionsGrid.SelectedItems}">
                    <MenuItem.Icon>
                        <controls:SymbolIcon Symbol="Copy"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Copy All"
                          InputGesture="Ctrl+Shift+C"
                          Command="{Binding #Editor.CopyAll}"
                          CommandParameter="{Binding #ConditionsGrid.ItemsSource}">
                    <MenuItem.Icon>
                        <controls:SymbolIcon Symbol="CopyFilled"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Paste"
                          InputGesture="Ctrl+V"
                          Command="{Binding #Editor.Paste}"
                          CommandParameter="{Binding #ConditionsGrid.SelectedIndex}">
                    <MenuItem.Icon>
                        <controls:SymbolIcon Symbol="Paste"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuFlyout>
        </DataGrid.ContextFlyout>

        <DataGrid.Columns>
            <DataGridTemplateColumn Header="Run On">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate DataType="model:EditableCondition">
                        <Grid x:Name="Grid">
                            <Grid.Resources>
                                <converter1:ReturnParameterIfTrueConverter
                                    x:Key="ReturnGridLengthPixelIfTrue"
                                    x:TypeArguments="system:Double"
                                    Converter="{x:Static converter1:DoubleConverters.ToGridLengthPixel}"
                                    DefaultValue="0"/>
                                <converter1:ReturnParameterIfTrueConverter
                                    x:Key="ReturnGridLengthStarIfTrue"
                                    x:TypeArguments="system:Double"
                                    Converter="{x:Static converter1:DoubleConverters.ToGridLengthStar}"
                                    DefaultValue="0"/>
                                <converter1:ReturnParameterIfTrueConverter
                                    x:Key="ReturnGridLengthAutoIfTrue"
                                    x:TypeArguments="system:Double"
                                    Converter="{x:Static converter1:DoubleConverters.ToGridLengthAuto}"
                                    DefaultValueConverted="{x:Static GridLength.Star}"/>
                            </Grid.Resources>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition
                                    Width="{Binding ShowMoreRunOn^, Converter={StaticResource ReturnGridLengthAutoIfTrue}, ConverterParameter=0}"/>
                                <ColumnDefinition
                                    Width="{Binding ShowMoreRunOn^, Converter={StaticResource ReturnGridLengthPixelIfTrue}, ConverterParameter=5}"/>
                                <ColumnDefinition
                                    Width="{Binding ShowMoreRunOn^, Converter={StaticResource ReturnGridLengthStarIfTrue}, ConverterParameter=1}"/>
                            </Grid.ColumnDefinitions>

                            <CheckBox Grid.Column="0"
                                      ToolTip.Tip="Swap Subject and Target"
                                      Classes="CheckmarkOnly"
                                      IsChecked="{Binding SwapSubjectAndTarget}"
                                      VerticalAlignment="Top"/>

                            <ComboBox Grid.Column="1"
                                      MaxDropDownHeight="750"
                                      ItemsSource="{Binding #Editor.RunOnTypes}"
                                      SelectedItem="{Binding RunOnType}"
                                      IsVisible="{Binding }"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Top"/>

                            <picker:PlacedPickerButton
                                Grid.Column="3"
                                Placed="{Binding ReferenceLink}"
                                LinkCache="{Binding #Editor.LinkCache}"
                                IsVisible="{Binding ShowReference^}"
                                VerticalAlignment="Top"/>

                            <picker:QuestAliasPicker
                                Grid.Column="3"
                                Quest="{Binding #Editor.Context}"
                                AliasIndex="{Binding QuestAlias, Mode=TwoWay}"
                                IsVisible="{Binding ShowQuestAlias^}"
                                ScopedAliasTypes="{x:Static constants:EnumConstants.ReferenceAliasTypes}"
                                VerticalAlignment="Top"/>

                            <picker:PackageDataPicker
                                Grid.Column="3"
                                Package="{Binding #Editor.Context}"
                                PackageDataIndex="{Binding PackageData, Mode=TwoWay}"
                                LinkCache="{Binding #Editor.LinkCache}"
                                IsVisible="{Binding ShowPackageData^}"
                                ScopedTypes="{x:Static constants:RecordTypeConstants.PlacedTypes}"
                                VerticalAlignment="Top"/>

                            <picker:EventDataPicker
                                Grid.Column="3"
                                Quest="{Binding #Editor.Context}"
                                EventMember="{Binding EventData, Mode=TwoWay}"
                                IsVisible="{Binding ShowEventData^}"
                                VerticalAlignment="Top"/>
                        </Grid>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>

            <DataGridTemplateColumn Header="Function"
                                    CellTemplate="{Binding #Editor.FunctionTemplate}"/>

            <DataGridTemplateColumn Header="Data">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate DataType="model:EditableCondition" x:DataType="model:EditableCondition">
                        <ContentControl x:Name="VariablesContainer"
                                        Content="{Binding Data}"
                                        HorizontalAlignment="Stretch">
                            <ContentControl.ContentTemplate>
                                <dataTemplates:ConditionDataTemplate
                                    Condition="{ReflectionBinding}"
                                    ValueChanged="{ReflectionBinding DataChanged, Mode=TwoWay}"
                                    Context="{Binding #Editor.Context}"
                                    QuestContext="{Binding #Editor.QuestContext}"
                                    LinkCache="{Binding #Editor.LinkCache}"/>
                            </ContentControl.ContentTemplate>
                        </ContentControl>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>

            <DataGridTemplateColumn Header="Compare">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate DataType="model:EditableCondition">
                        <ComboBox ItemsSource="{x:Static constants:EnumConstants.CompareOperatorTypesString}"
                                  HorizontalAlignment="Stretch"
                                  SelectedItem="{Binding CompareOperator, Converter={x:Static converter:SkyrimEnumConverters.StringToCompareOperator}}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>

            <DataGridTemplateColumn Header="Value" MinWidth="113" Width="113">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate DataType="model:EditableCondition">
                        <Grid ColumnDefinitions="Auto,*">
                            <CheckBox Grid.Column="0"
                                      ToolTip.Tip="Use Global"
                                      Classes="CheckmarkOnly"
                                      IsChecked="{Binding UseGlobal}"
                                      VerticalAlignment="Top"/>

                            <subrecord:ConditionValue
                                Grid.Column="1"
                                VerticalAlignment="Top"
                                HorizontalAlignment="Stretch"
                                IsVisible="{Binding !UseGlobal}"
                                Condition="{Binding}"
                                ConditionDataChanged="{Binding DataChanged, Mode=OneWay}"
                                LinkCache="{Binding #Editor.LinkCache}"/>

                            <picker1:FormKeyPicker
                                Grid.Column="1"
                                VerticalAlignment="Top"
                                HorizontalAlignment="Stretch"
                                IsVisible="{Binding UseGlobal}"
                                LinkCache="{Binding #Editor.LinkCache}"
                                ScopedTypes="{x:Static constants:RecordTypeConstants.GlobalVariableTypes}"
                                ShowFormKeyBox="False"
                                FormKey="{Binding GlobalValue}"/>
                        </Grid>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>

            <DataGridTemplateColumn Header="Or" MinWidth="77">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate DataType="model:EditableCondition">
                        <ComboBox ItemsSource="{x:Static constants:EnumConstants.AndOr}"
                                  SelectedIndex="{Binding Or}"
                                  HorizontalAlignment="Stretch"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
        </DataGrid.Columns>
    </DataGrid>
</UserControl>